name: Build & Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"

env:
  IMAGE_NAME: dheerajkumarp/fleet_service_manager
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./service_manager   # Make sure your Dockerfile is inside ./service_manager
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Copy docker-compose file to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          source: "docker-compose_prod.yaml"
          target: "~/"

      - name: SSH & deploy on VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            set -e

            echo "${{ secrets.FIREBASE_KEY_JSON }}" | base64 -d > ~/firebase_key.json
            cat <<EOF > ~/service.env
            FIREBASE_KEY_PATH=/app/secrets/firebase_key.json
            REDIS_URL=${{ secrets.REDIS_URL }}
            OAUTH2_ENV=${{ secrets.OAUTH2_ENV }}
            DEV_OAUTH2_URL=${{ secrets.DEV_OAUTH2_URL }}
            PROD_OAUTH2_URL=${{ secrets.PROD_OAUTH2_URL }}
            X_INTROSPECT_SECRET=${{ secrets.X_INTROSPECT_SECRET }}
            EOF

            # Stop old containers & remove orphans
            docker compose -f ~/docker-compose_prod.yaml down --volumes --remove-orphans || true

            # Always pull the freshly built image
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Run DB migrations with the new image
            docker compose -f ~/docker-compose_prod.yaml run --rm service_manager alembic upgrade head

            # Start new version
            docker compose -f ~/docker-compose_prod.yaml up -d --force-recreate

            # Optional cleanup (safe prune)
            docker image prune -f
            docker volume prune -f
            docker network prune -f
