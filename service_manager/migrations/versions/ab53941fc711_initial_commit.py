"""initial commit

Revision ID: ab53941fc711
Revises: 
Create Date: 2025-08-23 16:31:36.278782

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ab53941fc711'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('service_metadata', sa.JSON(), nullable=True),
    sa.Column('onboarded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_services_id'), 'services', ['id'], unique=False)
    op.create_table('tenants',
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('tenant_name', sa.String(length=255), nullable=False),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('longitude', sa.String(length=50), nullable=True),
    sa.Column('latitude', sa.String(length=50), nullable=True),
    sa.Column('tenant_metadata', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('tenant_id'),
    sa.UniqueConstraint('tenant_name')
    )
    op.create_table('cutoff',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('booking_cutoff', sa.Integer(), nullable=False),
    sa.Column('cancellation_cutoff', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id')
    )
    op.create_index(op.f('ix_cutoff_id'), 'cutoff', ['id'], unique=False)
    op.create_table('departments',
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('department_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('department_id'),
    sa.UniqueConstraint('department_name', 'tenant_id', name='uix_department_tenant')
    )
    op.create_table('groups',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('group_name', sa.String(length=100), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('group_id'),
    sa.UniqueConstraint('group_name', 'tenant_id', name='uix_group_tenant')
    )
    op.create_table('modules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_modules_id'), 'modules', ['id'], unique=False)
    op.create_table('roles',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('role_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('role_id'),
    sa.UniqueConstraint('role_name'),
    sa.UniqueConstraint('role_name', 'tenant_id', name='uix_role_name_tenant')
    )
    op.create_table('shifts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('shift_code', sa.String(), nullable=False),
    sa.Column('log_type', sa.Enum('IN', 'OUT', name='logtype'), nullable=False),
    sa.Column('shift_time', sa.Time(), nullable=False),
    sa.Column('day', sa.String(), nullable=False),
    sa.Column('waiting_time_minutes', sa.Integer(), nullable=False),
    sa.Column('pickup_type', sa.Enum('PICKUP', 'NODAL', name='pickuptype'), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'ANY', name='gendertype'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shifts_id'), 'shifts', ['id'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('mobile_number', sa.String(length=15), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('mobile_number')
    )
    op.create_table('vendors',
    sa.Column('vendor_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('vendor_name', sa.String(), nullable=False),
    sa.Column('contact_person', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('vendor_id')
    )
    op.create_index(op.f('ix_vendors_vendor_id'), 'vendors', ['vendor_id'], unique=False)
    op.create_table('drivers',
    sa.Column('driver_id', sa.Integer(), nullable=False),
    sa.Column('driver_code', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('mobile_number', sa.String(length=20), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('vendor_id', sa.Integer(), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('gender', sa.String(length=10), nullable=True),
    sa.Column('alternate_mobile_number', sa.String(length=20), nullable=True),
    sa.Column('permanent_address', sa.String(length=255), nullable=True),
    sa.Column('current_address', sa.String(length=255), nullable=True),
    sa.Column('bgv_status', sa.String(length=50), nullable=True),
    sa.Column('bgv_date', sa.Date(), nullable=True),
    sa.Column('bgv_doc_url', sa.String(length=255), nullable=True),
    sa.Column('police_verification_status', sa.String(length=50), nullable=True),
    sa.Column('police_verification_date', sa.Date(), nullable=True),
    sa.Column('police_verification_doc_url', sa.String(length=255), nullable=True),
    sa.Column('medical_verification_status', sa.String(length=50), nullable=True),
    sa.Column('medical_verification_date', sa.Date(), nullable=True),
    sa.Column('medical_verification_doc_url', sa.String(length=255), nullable=True),
    sa.Column('training_verification_status', sa.String(length=50), nullable=True),
    sa.Column('training_verification_date', sa.Date(), nullable=True),
    sa.Column('training_verification_doc_url', sa.String(length=255), nullable=True),
    sa.Column('eye_test_verification_status', sa.String(length=50), nullable=True),
    sa.Column('eye_test_verification_date', sa.Date(), nullable=True),
    sa.Column('eye_test_verification_doc_url', sa.String(length=255), nullable=True),
    sa.Column('license_number', sa.String(length=20), nullable=True),
    sa.Column('license_expiry_date', sa.Date(), nullable=True),
    sa.Column('license_doc_url', sa.String(length=255), nullable=True),
    sa.Column('photo_url', sa.String(length=255), nullable=True),
    sa.Column('induction_date', sa.Date(), nullable=True),
    sa.Column('induction_doc_url', sa.String(length=255), nullable=True),
    sa.Column('badge_number', sa.String(length=20), nullable=True),
    sa.Column('badge_expiry_date', sa.Date(), nullable=True),
    sa.Column('badge_doc_url', sa.String(length=255), nullable=True),
    sa.Column('alternate_govt_id', sa.String(length=20), nullable=True),
    sa.Column('alternate_govt_id_doc_type', sa.String(length=50), nullable=True),
    sa.Column('alternate_govt_id_doc_url', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.vendor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('driver_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('mobile_number')
    )
    op.create_index(op.f('ix_drivers_driver_id'), 'drivers', ['driver_id'], unique=False)
    op.create_table('employees',
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('employee_code', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('mobile_number', sa.String(length=15), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('gender', sa.String(length=50), nullable=True),
    sa.Column('alternate_mobile_number', sa.String(length=15), nullable=True),
    sa.Column('office', sa.String(length=255), nullable=True),
    sa.Column('special_need', sa.String(), nullable=True),
    sa.Column('special_need_start_date', sa.Date(), nullable=True),
    sa.Column('special_need_end_date', sa.Date(), nullable=True),
    sa.Column('subscribe_via_email', sa.Boolean(), nullable=True),
    sa.Column('subscribe_via_sms', sa.Boolean(), nullable=True),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('latitude', sa.String(length=50), nullable=True),
    sa.Column('longitude', sa.String(length=50), nullable=True),
    sa.Column('landmark', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['department_id'], ['departments.department_id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('employee_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('employee_code'),
    sa.UniqueConstraint('mobile_number')
    )
    op.create_index(op.f('ix_employees_employee_id'), 'employees', ['employee_id'], unique=False)
    op.create_table('group_role',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.group_id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], ),
    sa.PrimaryKeyConstraint('group_id', 'role_id'),
    sa.UniqueConstraint('group_id', 'role_id', name='uix_group_role')
    )
    op.create_table('group_user',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.group_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('group_id', 'user_id')
    )
    op.create_table('policies',
    sa.Column('policy_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('module_id', sa.Integer(), nullable=True),
    sa.Column('can_view', sa.Boolean(), nullable=True),
    sa.Column('can_create', sa.Boolean(), nullable=True),
    sa.Column('can_edit', sa.Boolean(), nullable=True),
    sa.Column('can_delete', sa.Boolean(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('condition', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.group_id'], ),
    sa.ForeignKeyConstraint(['module_id'], ['modules.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('policy_id'),
    sa.UniqueConstraint('tenant_id', 'service_id', 'module_id', 'group_id', 'role_id', 'user_id', name='uix_policy')
    )
    op.create_index(op.f('ix_policies_policy_id'), 'policies', ['policy_id'], unique=False)
    op.create_table('shift_routes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shift_id', sa.Integer(), nullable=False),
    sa.Column('route_date', sa.Date(), nullable=False),
    sa.Column('route_number', sa.Integer(), nullable=False),
    sa.Column('route_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['shift_id'], ['shifts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shift_routes_id'), 'shift_routes', ['id'], unique=False)
    op.create_table('user_role',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id', 'tenant_id'),
    sa.UniqueConstraint('user_id', 'role_id', 'tenant_id', name='uix_user_role')
    )
    op.create_table('user_tenant',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'tenant_id'),
    sa.UniqueConstraint('user_id', 'tenant_id', name='uix_user_tenant')
    )
    op.create_table('vehicle_types',
    sa.Column('vehicle_type_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.Column('fuel_type', sa.Enum('PETROL', 'DIESEL', 'ELECTRIC', 'CNG', 'HYBRID', name='fueltype'), nullable=False),
    sa.Column('vendor_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.vendor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('vehicle_type_id')
    )
    op.create_index(op.f('ix_vehicle_types_vehicle_type_id'), 'vehicle_types', ['vehicle_type_id'], unique=False)
    op.create_table('bookings',
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('employee_code', sa.String(length=50), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('shift_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('booking_date', sa.Date(), nullable=False),
    sa.Column('pickup_location', sa.String(length=255), nullable=False),
    sa.Column('pickup_location_latitude', sa.String(length=50), nullable=False),
    sa.Column('pickup_location_longitude', sa.String(length=50), nullable=False),
    sa.Column('drop_location', sa.String(length=255), nullable=False),
    sa.Column('drop_location_latitude', sa.String(length=50), nullable=False),
    sa.Column('drop_location_longitude', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['department_id'], ['departments.department_id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.employee_id'], ),
    sa.ForeignKeyConstraint(['shift_id'], ['shifts.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], ),
    sa.PrimaryKeyConstraint('booking_id')
    )
    op.create_index(op.f('ix_bookings_booking_id'), 'bookings', ['booking_id'], unique=False)
    op.create_table('devices',
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('device_uuid', sa.String(length=255), nullable=False),
    sa.Column('access_token', sa.String(length=512), nullable=True),
    sa.Column('device_name', sa.String(length=255), nullable=True),
    sa.Column('fcm_token', sa.String(length=512), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.employee_id'], ),
    sa.PrimaryKeyConstraint('device_id'),
    sa.UniqueConstraint('employee_id')
    )
    op.create_index(op.f('ix_devices_device_id'), 'devices', ['device_id'], unique=False)
    op.create_table('vehicles',
    sa.Column('vehicle_id', sa.Integer(), nullable=False),
    sa.Column('vendor_id', sa.Integer(), nullable=False),
    sa.Column('vehicle_type_id', sa.Integer(), nullable=True),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_code', sa.String(), nullable=False, comment='App-managed vehicle code'),
    sa.Column('reg_number', sa.String(), nullable=False, comment='Physical vehicle registration number'),
    sa.Column('status', sa.String(), nullable=False, comment='Vehicle status like ACTIVE, INACTIVE, MAINTENANCE'),
    sa.Column('rc_card_url', sa.String(), nullable=True, comment='URL to RC card document'),
    sa.Column('rc_expiry_date', sa.Date(), nullable=True, comment='RC card expiry date'),
    sa.Column('insurance_expiry_date', sa.Date(), nullable=True, comment='Insurance expiry date'),
    sa.Column('insurance_url', sa.String(), nullable=True, comment='URL to insurance document'),
    sa.Column('permit_url', sa.String(), nullable=True, comment='URL to permit document'),
    sa.Column('permit_expiry_date', sa.Date(), nullable=True, comment='Permit expiry date'),
    sa.Column('pollution_expiry_date', sa.Date(), nullable=True, comment='Pollution certificate expiry date'),
    sa.Column('pollution_url', sa.String(), nullable=True, comment='URL to pollution certificate'),
    sa.Column('fitness_url', sa.String(), nullable=True, comment='URL to fitness certificate'),
    sa.Column('fitness_expiry_date', sa.Date(), nullable=True, comment='Fitness certificate expiry date'),
    sa.Column('tax_receipt_date', sa.Date(), nullable=True, comment='Tax receipt date'),
    sa.Column('tax_receipt_url', sa.String(), nullable=True, comment='URL to tax receipt'),
    sa.Column('description', sa.Text(), nullable=True, comment='Optional description or remarks about the vehicle'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.driver_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vehicle_type_id'], ['vehicle_types.vehicle_type_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.vendor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('vehicle_id'),
    sa.UniqueConstraint('reg_number'),
    sa.UniqueConstraint('vehicle_code')
    )
    op.create_index(op.f('ix_vehicles_vehicle_id'), 'vehicles', ['vehicle_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_vehicles_vehicle_id'), table_name='vehicles')
    op.drop_table('vehicles')
    op.drop_index(op.f('ix_devices_device_id'), table_name='devices')
    op.drop_table('devices')
    op.drop_index(op.f('ix_bookings_booking_id'), table_name='bookings')
    op.drop_table('bookings')
    op.drop_index(op.f('ix_vehicle_types_vehicle_type_id'), table_name='vehicle_types')
    op.drop_table('vehicle_types')
    op.drop_table('user_tenant')
    op.drop_table('user_role')
    op.drop_index(op.f('ix_shift_routes_id'), table_name='shift_routes')
    op.drop_table('shift_routes')
    op.drop_index(op.f('ix_policies_policy_id'), table_name='policies')
    op.drop_table('policies')
    op.drop_table('group_user')
    op.drop_table('group_role')
    op.drop_index(op.f('ix_employees_employee_id'), table_name='employees')
    op.drop_table('employees')
    op.drop_index(op.f('ix_drivers_driver_id'), table_name='drivers')
    op.drop_table('drivers')
    op.drop_index(op.f('ix_vendors_vendor_id'), table_name='vendors')
    op.drop_table('vendors')
    op.drop_table('users')
    op.drop_index(op.f('ix_shifts_id'), table_name='shifts')
    op.drop_table('shifts')
    op.drop_table('roles')
    op.drop_index(op.f('ix_modules_id'), table_name='modules')
    op.drop_table('modules')
    op.drop_table('groups')
    op.drop_table('departments')
    op.drop_index(op.f('ix_cutoff_id'), table_name='cutoff')
    op.drop_table('cutoff')
    op.drop_table('tenants')
    op.drop_index(op.f('ix_services_id'), table_name='services')
    op.drop_table('services')
    # ### end Alembic commands ###
